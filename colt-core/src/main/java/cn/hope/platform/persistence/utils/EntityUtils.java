package cn.hope.platform.persistence.utils;

import cn.hope.platform.utils.StringTool;

import javax.persistence.*;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

/**
 * {@link EntityUtils }
 * Created by htl on 16-7-4.
 */
public class EntityUtils {

    private final static Map<Class,String> ID_NAME_MAP = new HashMap<>();
    private final static Map<Class,AccessibleObject> ID_ACCESSIBLE_MAP = new HashMap<>();
    private final static Map<Class,Class> ID_TYPE_MAP = new HashMap<>();

    /**
     * 返回格式化后的主键
     * @param id
     * @param entityClass
     * @return
     */
    public static Object getIdFromString(String id,Class entityClass){
        if(id == null || id.isEmpty()){
            return null;
        }

        try{
            Class idType = getIdType(entityClass);
            if(idType.equals(Long.class) || idType.equals(long.class)){
                return Long.parseLong(StringTool.getOnlyIntegerNumbers(id));
            }else if(idType.equals(Integer.class) || idType.equals(int.class)){
                return Integer.parseInt(StringTool.getOnlyIntegerNumbers(id));
            }else if(idType.equals(BigInteger.class)){
                return new BigInteger(StringTool.getOnlyIntegerNumbers(id));
            }else if(idType.equals(Short.class) || idType.equals(short.class)){
                return Short.parseShort(StringTool.getOnlyIntegerNumbers(id));
            }else if(idType.equals(BigDecimal.class)){
                return new BigDecimal(StringTool.getOnlyIntegerNumbers(id));
            }else if(idType.equals(String.class)){
                return id;
            }else{
                throw new IllegalArgumentException("type"+idType.getName()+"from entity" +entityClass.getName()+"cannot be converted");
            }


        }catch(NumberFormatException ex){
            return null;
        }
    }

    /**
     * 返回实体类表名
     * @param clazz
     * @param nameWithSchema
     * @return
     */
    public static String getEntityTableName(Class clazz,boolean nameWithSchema){
        String name = null;
        String schema = null;
        Table table = (Table)clazz.getAnnotation(Table.class);
        if(table != null && table.name() != null && !table.name().isEmpty()){
            name = table.name();
            schema = table.schema();
        }else{
            Entity entityAnntation = (Entity)clazz.getAnnotation(Entity.class);
            if(entityAnntation != null && entityAnntation.name() != null && !entityAnntation.name().isEmpty()){
                name = entityAnntation.name();
            }else{
                name = clazz.getSimpleName();
            }
        }

        if(nameWithSchema == true && schema != null){
            name = schema + "." +name;
        }
        return name;
    }

    /**
     *
     * @param clazz
     * @return
     */
    public static boolean hasAutoGeneratedId(Class clazz){
        AccessibleObject accessibleObject = getIdAccessibleObject(clazz);
        return accessibleObject != null && accessibleObject.isAnnotationPresent(GeneratedValue.class);
    }

    public static boolean hasEmbeddedId(Class clazz){
        AccessibleObject accessibleObject = getIdAccessibleObject(clazz);
        return accessibleObject != null && accessibleObject.isAnnotationPresent(EmbeddedId.class);
    }

    public static boolean isPersisted(Object object){
        return getId(object) != null;
    }

    public static Object getId(Object object){
        if(object == null){
            return null;
        }
        return getId(object,object.getClass());
    }

    public static Object getId(Object object,Class clazz){
        try{
            if(object == null){
                return null;
            }

            AccessibleObject accessibleObject = getIdAccessibleObject(clazz);
            if(accessibleObject instanceof  Field){
                Field field = (Field)accessibleObject;
                field.setAccessible(true);
                return field.get(object);
            }


            if(accessibleObject instanceof Method){
                Method method = (Method)accessibleObject;
                return method.invoke(object);
            }

        }catch(SecurityException | IllegalArgumentException | IllegalAccessException | InvocationTargetException ex){
        }
        return null;
    }

    /**
     *
     * @param clazz
     * @return
     */
    public static Class getIdType(Class clazz){
        Class type = ID_TYPE_MAP.get(clazz);
        if(type != null){
            return type;
        }
        AccessibleObject accessibleObject = getIdAccessibleObject(clazz);
        if(accessibleObject instanceof Field){
            type = ((Field)accessibleObject).getType();
            ID_TYPE_MAP.put(clazz,type);
            return type;
        }

        if(accessibleObject instanceof Method){
            type = ((Method)accessibleObject).getReturnType();
            ID_TYPE_MAP.put(clazz,type);
            return type;
        }

        return null;
    }

    public static AccessibleObject getIdAccessibleObject(Class clazz){
        AccessibleObject accessibleObjectFromMap = ID_ACCESSIBLE_MAP.get(clazz);
        if(accessibleObjectFromMap != null){
            return accessibleObjectFromMap;
        }

        for(Field field:clazz.getDeclaredFields()){
            ID_ACCESSIBLE_MAP.put(clazz,field);
            return field;
        }

        for(Method method : clazz.getDeclaredMethods()){
            if(method.isAnnotationPresent(Id.class) || method.isAnnotationPresent(EmbeddedId.class)){
                ID_ACCESSIBLE_MAP.put(clazz,method);
                return method;
            }
        }

        if(clazz.getSuperclass() != null && !clazz.getSuperclass().equals(Object.class)){
            return getIdAccessibleObject(clazz.getSuperclass());
        }
        return null;
    }

    public static String getIdFieldName(Class clazz){
        String nameFromMap = ID_NAME_MAP.get(clazz);
        if(nameFromMap != null){
            return nameFromMap;
        }

        AccessibleObject accessibleObject = getIdAccessibleObject(clazz);
        if(accessibleObject instanceof Field){
            String name = ((Field)accessibleObject).getName();
            ID_NAME_MAP.put(clazz,name);
            return name;
        }

        if(accessibleObject instanceof  Method){
            String name = ((Method)accessibleObject).getName();
            String withoutGet = name.substring(3,name.length());
            withoutGet = getLowerFirstLetter(withoutGet);
            ID_NAME_MAP.put(clazz,withoutGet);
            return withoutGet;
        }

        return null;
    }

    public static String getLowerFirstLetter(String string){
        if(string.length() == 1){
            return string.toLowerCase();
        }

        if(string.length() > 1){
            return string.substring(0,1).toLowerCase()+""+string.substring(1,string.length());
        }
        return "";
    }

    public static boolean isEntity(Class clazz){
        if(clazz.isAnnotationPresent(Entity.class)){
            return true;
        }

        if(clazz.getSuperclass() != null && !clazz.getSuperclass().equals(Object.class)){
            return isEntity(clazz.getSuperclass());
        }
        return false;
    }
}
